#version 400 core

//variables are in because they come from VAO data
in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4]; //maximum amount of lights that can affect an entity at once (4)
out vec3 toCameraVector;
out float visibility;

//use this in vertex shader to update location, rotation, and scale because faster
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float useFakeLighting; //make normals point up

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.002; //general visibility of entity
const float gradient = 7; //transition from normal to fog

uniform vec4 plane;

void main(void) {
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane); //calculate which vertex is above the clip plane and cull it
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition; //give vertex position in relation to camera

	gl_Position = projectionMatrix * positionRelativeToCam;
	
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		//make normal point upwards
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	
	//look up the dot product for vectors
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	for(int i = 0; i < 4; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0); //make sure visibility stays in 0-1
}